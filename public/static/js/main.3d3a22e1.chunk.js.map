{"version":3,"sources":["logo.svg","components/Courselistitem.js","components/Courses.js","components/Course.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","courseImage","height","marginBottom","coursePstyle","borderTop","color","courseHstyle","minHeight","fontSize","fontWeight","buttonStyle","backgroundColor","CourseItem","course","partnerId","id","courseType","courseTitle","courseId","coursePhotoUrl","devicesSupported","levelOfComplexity","className","style","alt","src","to","homeTitle","COURSES_QUERY","gql","Courses","query","loading","error","data","console","log","courses","slice","map","key","Component","width","courseBox","border","marginTop","COURSE_QUERY","Course","this","props","match","params","variables","singleLineDescription","bannerImage","homeList","HOME_COURSES_QUERY","Home","featuredcourses","client","ApolloClient","uri","App","logo","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d3a22e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4ef4426c.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nconst courseImage = {\n   height:'150px',\n   marginBottom: '20px'\n}\nconst coursePstyle = {\n   borderTop: '1px solid',\n   color: '#000000'\n}\nconst courseHstyle = {\n   minHeight: '80px',\n   fontSize: '20px',\n   fontWeight:'bold',\n   color:'#d62c79'\n}\n\nconst buttonStyle = {\n   backgroundColor:'#d62c79',\n}\n\nexport default function CourseItem({\n\ncourse:{CourseItem, id, partnerId, courseType, courseTitle, courseId, coursePhotoUrl, devicesSupported, levelOfComplexity}\n}){\n    //console.log(props.course);\n    return (\n        \n      <div className=\"col-md-4\">\n      <div className=\"card card-body mb-3\">\n         <img style={courseImage} alt ={courseTitle} src={coursePhotoUrl}/>\n         <h4 style={courseHstyle}> Course Title : {courseTitle}</h4>\n         <p style={coursePstyle}> Course Type: {courseType}</p>\n         <p style={coursePstyle}> Partner ID: {partnerId}</p>\n         <p style={coursePstyle}> Device Suported: {devicesSupported}</p>\n         <p style={coursePstyle}> Level of Complexity: {levelOfComplexity}</p>\n      <Link to={`/course/${courseId}`} style={buttonStyle} className=\"btn btn-secondary\">\n         Course Details\n       </Link>\n    </div>\n    </div>\n\n    );\n  }","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport CourseItem from './Courselistitem';\n\nconst homeTitle = {\n  fontSize:'40px',\n  color:'#d62c79',\n }\n\nconst COURSES_QUERY = gql`\n  query CoursesQuery {\n    courses {\n      partnerId\n      id\n      courseId\n      courseType\n      courseTitle\n      coursePhotoUrl\n      devicesSupported\n      levelOfComplexity\n    }\n  }\n`;\n\nexport class Courses extends Component {\n    render(){\n        return(\n          <Fragment>\n            <h1 style={homeTitle} className=\"display-4 my-3\">Online Courses</h1>\n            <div className=\"row\">\n            <Query query={COURSES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            console.log(data);\n            return (<Fragment>\n                  {data.courses.slice(0, 12).map(course => (\n                  <CourseItem key={course.courseId} course={course} />\n                ))}\n            </Fragment>\n            );\n          }}\n        </Query>\n        </div>\n            \n        </Fragment>\n        );\n\n    }\n\n}\n\nexport default Courses;","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nconst courseImage = {\n  height:'300px',\n  width: '500px',\n  marginBottom: '20px'\n}\nconst courseBox = {\n  border: '2px solid',\n  marginTop: '20px',\n  marginBottom: '20px'\n}\n\n\nconst COURSE_QUERY = gql`\n  query CourseQuery($courseId: String!) {\n    course(courseId: $courseId) {\n      partnerId\n      id\n      courseId\n      courseType\n      courseTitle\n      singleLineDescription\n      coursePhotoUrl\n      levelOfComplexity\n      devicesSupported\n    }\n  }\n`;\n\nexport class Course extends Component{\n  render(){\n    let { courseId } = this.props.match.params;\n    return(\n      <Fragment>\n                  <Query query={COURSE_QUERY} variables={{ courseId }}>\n                      {({ loading, error, data }) => {\n                            if (loading) return <h4>Loading...</h4>;\n                            if (error) console.log(error);\n                            const{\n                              courseTitle,\n                              singleLineDescription,\n                              coursePhotoUrl,\n                              levelOfComplexity,\n                              courseType,\n                              devicesSupported\n                            }=data.course;\n\n                            console.log(data);\n\n                            return (\n                              <div>\n                              <h1 className=\"display-4 my-3\">\n                              <span className=\"text-dark\"></span> {courseTitle}\n                              </h1>\n                              <img style={courseImage} alt={courseTitle} src={coursePhotoUrl}/>\n                              <p><span className=\"text-dark\">Overview:</span> {singleLineDescription}</p>\n                              \n                              <hr />\n                              <div style={courseBox} className=\"course-details col-md-4\">\n                              <p > Device Suported: {devicesSupported}</p>\n                              <p > Level of Complexity: {levelOfComplexity}</p>\n                              <p > Course Type: {courseType}</p>\n      \n      \n                              </div>\n                      <Link to=\"/\" className=\"btn btn-secondary\">\n                        Back\n                      </Link>\n                                  </div>\n                                );\n                \n                      }\n                      }\n                      </Query> \n    </Fragment>\n  \n    );\n  }\n\n}\nexport default Course","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport CourseItem from './Courselistitem';\n\nconst bannerImage = {\n  width:'100%'\n}\nconst homeTitle = {\n fontSize:'40px',\n color:'#d62c79',\n}\nconst homeList ={\n  marginTop: '80px',\n  marginBottom: '80px'\n}\n\nconst HOME_COURSES_QUERY = gql`\n  query HomeCoursesQuery {\n    featuredcourses{\n      partnerId\n      id\n      courseId\n      courseType\n      courseTitle\n      coursePhotoUrl\n      devicesSupported\n      levelOfComplexity\n    }\n  }\n`;\n\nexport class Home extends Component {\n    render(){\n        return(\n          <Fragment>\n            <div  className=\"col-md-12\">\n          <img style={bannerImage} src=\"https://mobile.englishedge.in/api/1/images/CRS-751.png\" alt=\"header\"></img>\n           </div>\n            <h1 style={homeTitle} className=\"display-4 my-3\">Featured Courses</h1>\n            <div style={homeList}  className=\"row\">\n            <Query query={HOME_COURSES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            console.log(data);\n            return (<Fragment>\n                  {data.featuredcourses.map(course => (\n                  <CourseItem key={course.courseId} course={course} />\n                ))}\n            </Fragment>\n            );\n          }}\n        </Query>\n        </div>\n            \n        </Fragment>\n        );\n\n    }\n\n}\n\nexport default Home;","//import React from 'react';\nimport React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Courses from \"./components/Courses\";\nimport Course from './components/Course';\nimport Home from './components/Home';\n\n\nimport logo from './logo.svg';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql'\n});\n\nclass App extends Component{\n  render() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n    <div className=\"container\">\n      \n      <img\n              src={logo}\n              alt=\"Fair & lovely\"\n              style={{ width: 250, display: 'block', margin: '10px auto' }}\n            />\n            <Route exact path=\"/\" component={Courses} />\n            <Route exact path=\"/home\" component={Home} />\n            <Route exact path=\"/course/:courseId\" component={Course} />\n\n\n    </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}